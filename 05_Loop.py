####################################################################
# 반복문
# 로직을 사용하여 수행한다.
# For
# 타 프로그래밍 언어의 foreach 와 구동원리가 같음
####################################################################
# 1씩 증가하는 수를 표현할 때 
print(1)
print(2)
print(3)
print(4)
# ....
print(100)

# print () 함수를 반복적으로 호출하는 로직을 반복문을 통하여 줄일 수 있다.
# Python for 문의 range() : 정수의 숫자 범위를 지정해 주는 기능.
# range(1, 101) : 1 ~ 100      1이상 100 미만을 표현
# range(101) :    0 ~ 100 

for num in range(1,101) : 
    print(num,',',end='')
print('\n------------------------------------')
for num in range(101) : 
    print(num,',',end='')




# 리스트 (컬렉션 : 특정 데이터들을 열거하여 관리하는 데이터 유형)
lists = [1,2,7,5,6]
for i in lists : 
    print(i)

print('\n------------------------------------')

for i in [1,2,3,4,5] :
    print(i)



# 실습
# 1부터 100 사이의 수 중 짝수만 표현하는 로직을 구현하시오
for i in range (1,101):
    if i % 2 == 0:
        print(i,',',end='')

print('\n------------------------------------')

## 1부터 100 까지의 수 중 3의 배수인 숫자의 모든 합을 구하시오
sum = 0
for i in range (1,101):
    if i % 3 == 0:
        sum = sum + i
print(sum)



####################################################################
# 반복문 강제 종료 break
# 다음 순번 처리 Continue
# 특정 조건에 따라 반복문을 제어 할 수 있다.
####################################################################

sum = 0 # 정수값을 누적 변수
for i in range(0,100):
    if 30 < i < 40 :
        print(i, "은 합산되지 않고 다음 for 의 값을 처리합니다.")
        continue
    if i % 3 == 0 : 
        sum += i
    elif i == 77 :
        break
print(sum)





####################################################################
# 이중루프 (for in for)
# 메인 For 에서 받아온 값을 기준으로 반복적으로 수행하는 로직을 구현 할 수 있다.
####################################################################
# 구구단 만들기
# > 단수 변수를 2~9 까지 반복하고
# 행수 변수를 1 ~ 9 까지 반복해서 각 단수별로 행을 반복하여 곱한 값을 표현하는 원리

for i in range(2,10):
    print('\n', i,'단 입니다.')
    for j in range(1,9):
        print(i, '*', j, '=', i*j)


# triangle 표현하기
# 이중 루프를 이용한 * 삼각형 그리기

# y : 피라미드의 행을 변화 , 표현하는 함수
for y in range(1,10):
    for x in range(y) :
        print('*',end='')
    print()

for y in range(1,10) :
    print('*' * y)





####################################################################
# While
# 특정 조건을 만족 시킬 때 로직을 수행한다.
####################################################################
# 증가한 번호가 5 이하일 경우만 로직을 실행
student = 1
while student <= 20:
    print(student, '번 학생입니다.')
    student += 1 # 반드시 루프를 종료 시킬 수 있는 조건의 변화가 필요하다.
    if 10 < student < 15 :
        continue
    elif student == 18:
        break


# 실습
# 11번 부터 14번 학생은 표현되지 않게 코드를 수정

student = 1
while student <= 20:
    # print(student, '번 학생입니다.')
    student += 1 # 반드시 루프를 종료 시킬 수 있는 조건의 변화가 필요하다.
    if 10 < student < 15 :
        continue
    elif student == 18:
        break
    print(student, '번 학생입니다.')




####################################################################
# 무한루프
# 특정한 조건 없이는 끝나지 않고 반복하는 루프
####################################################################
# 프로그램이 구동되고 있는 동안 현재 시간을 지속하여 1초 단위로 표현하는 예제

from datetime import datetime
import time

while True : 
    print(datetime.now())
    time.sleep(1) #1초 


# 특정 조건을 만족할 경우 무한 루프를 빠져나오는 로직을 구현
# 종료해야 하는 범위가 지정되어있지 않는 프로세스의 종료를 구현하고자 할 때
print('3 + 7 = ?')
while True:
    result = input("정답은?")
    if (int(result) == 10 ):
        break
print("Good")

# 실습
# while 문을 사용하여 1에서 200까지 모든 3의 배수를 표현하고 누적 합계를 출력하세요.
num = 1 # 1 ~ 200 을 반복할 숫자.
sum = 0 # 누적합계
while num <= 200 :
    if num % 3 == 0:
        print(num, end=',')
        sum += num
    num += 1
print()
print("총 합은",sum)
    

    


# 별표 삼각형을 그리는 로직
for i in range(0,10):
    for j in range(9-i):
        print(' ',end='')
    print(i*"*")
    

# 별표 삼각형을 그리는 로직
for i in range(0,10):
    for j in range(9-i):
        print(' ',end='')
    print((i+i+1)*"*")


for y in range(1,11):
    공백의 갯수 표현
    print(' ' * (10-y),end=' ')
    별의 갯수 표현
    print("*" * (y*2-1))

count = 0
for i in range(0,10000):
    f = str(i)
    if '6' not in f :
        count += 1
print(count)


